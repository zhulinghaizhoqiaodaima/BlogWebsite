{
  "users": [
    {
      "id": 1,
      "username": "admin",
      "password": 123456,
      "roleState": true,
      "default": true,
      "region": "",
      "roleId": 1
    },
    {
      "username": "钢蛋",
      "password": "123",
      "roleState": true,
      "default": false,
      "region": "南极洲",
      "roleId": 2,
      "id": 3
    },
    {
      "username": "西门吹",
      "password": "123",
      "roleState": true,
      "default": false,
      "region": "",
      "roleId": 1,
      "id": 5
    },
    {
      "username": "诸葛村花",
      "password": "666",
      "region": "亚洲",
      "roleId": 2,
      "roleState": true,
      "default": false,
      "id": 9
    },
    {
      "username": "竹林海",
      "password": "123",
      "region": "南极洲",
      "roleId": 3,
      "roleState": true,
      "default": false,
      "id": 11
    },
    {
      "username": "张三",
      "password": "123",
      "region": "亚洲",
      "roleId": 2,
      "roleState": true,
      "default": false,
      "id": 12
    }
  ],
  "roles": [
    {
      "id": 1,
      "roleName": "超级管理员",
      "roleType": 1,
      "rights": [
        "/user-manage",
        "/user-manage/delete",
        "/user-manage/update",
        "/user-manage/list",
        "/right-manage",
        "/right-manage/role/list",
        "/right-manage/right/list",
        "/right-manage/role/update",
        "/right-manage/role/delete",
        "/right-manage/right/update",
        "/right-manage/right/delete",
        "/news-manage/list",
        "/news-manage/add",
        "/news-manage/update/:id",
        "/news-manage/preview/:id",
        "/news-manage/draft",
        "/news-manage/category",
        "/audit-manage",
        "/audit-manage/audit",
        "/audit-manage/list",
        "/publish-manage/unpublished",
        "/publish-manage/published",
        "/publish-manage/sunset",
        "/user-manage/add",
        "/home",
        "/news-manage",
        "/publish-manage"
      ]
    },
    {
      "id": 2,
      "roleName": "区域管理员",
      "roleType": 2,
      "rights": [
        "/home",
        "/user-manage",
        "/user-manage/add",
        "/user-manage/delete",
        "/user-manage/update",
        "/user-manage/list",
        "/news-manage",
        "/news-manage/list",
        "/news-manage/add",
        "/news-manage/update/:id",
        "/news-manage/preview/:id",
        "/news-manage/draft",
        "/news-manage/category",
        "/audit-manage",
        "/audit-manage/audit",
        "/audit-manage/list",
        "/publish-manage/unpublished",
        "/publish-manage/published",
        "/publish-manage/sunset",
        "/publish-manage"
      ]
    },
    {
      "id": 3,
      "roleName": "区域编辑",
      "roleType": 3,
      "rights": [
        "/home",
        "/news-manage",
        "/news-manage/list",
        "/news-manage/add",
        "/news-manage/update/:id",
        "/news-manage/preview/:id",
        "/news-manage/draft",
        "/audit-manage",
        "/audit-manage/list",
        "/publish-manage",
        "/publish-manage/unpublished",
        "/publish-manage/published",
        "/publish-manage/sunset"
      ]
    }
  ],
  "children": [
    {
      "id": 3,
      "title": "添加用户",
      "rightId": 2,
      "key": "/user-manage/add",
      "grade": 2
    },
    {
      "id": 4,
      "title": "删除用户",
      "rightId": 2,
      "key": "/user-manage/delete",
      "grade": 2
    },
    {
      "id": 5,
      "title": "修改用户",
      "rightId": 2,
      "key": "/user-manage/update",
      "grade": 2
    },
    {
      "id": 6,
      "title": "用户列表",
      "rightId": 2,
      "key": "/user-manage/list",
      "pagepermisson": 1,
      "grade": 2
    },
    {
      "id": 8,
      "title": "角色列表",
      "rightId": 7,
      "key": "/right-manage/role/list",
      "pagepermisson": 1,
      "grade": 2
    },
    {
      "id": 9,
      "title": "权限列表",
      "rightId": 7,
      "key": "/right-manage/right/list",
      "pagepermisson": 1,
      "grade": 2
    },
    {
      "id": 10,
      "title": "修改角色",
      "rightId": 7,
      "key": "/right-manage/role/update",
      "grade": 2
    },
    {
      "id": 11,
      "title": "删除角色",
      "rightId": 7,
      "key": "/right-manage/role/delete",
      "grade": 2
    },
    {
      "id": 12,
      "title": "修改权限",
      "rightId": 7,
      "key": "/right-manage/right/update",
      "grade": 2
    },
    {
      "id": 13,
      "title": "删除权限",
      "rightId": 7,
      "key": "/right-manage/right/delete",
      "grade": 2
    },
    {
      "id": 15,
      "title": "新闻列表",
      "rightId": 14,
      "key": "/news-manage/list",
      "grade": 2
    },
    {
      "id": 16,
      "title": "撰写新闻",
      "rightId": 14,
      "key": "/news-manage/add",
      "grade": 2,
      "pagepermisson": 1
    },
    {
      "id": 17,
      "title": "新闻更新",
      "rightId": 14,
      "key": "/news-manage/update/:id",
      "grade": 2,
      "routepermisson": 1
    },
    {
      "id": 18,
      "title": "新闻预览",
      "rightId": 14,
      "key": "/news-manage/preview/:id",
      "grade": 2,
      "routepermisson": 1
    },
    {
      "id": 19,
      "title": "草稿箱",
      "rightId": 14,
      "key": "/news-manage/draft",
      "pagepermisson": 1,
      "grade": 2
    },
    {
      "id": 20,
      "title": "新闻分类",
      "rightId": 14,
      "key": "/news-manage/category",
      "pagepermisson": 1,
      "grade": 2
    },
    {
      "id": 22,
      "title": "审核新闻",
      "rightId": 21,
      "key": "/audit-manage/audit",
      "pagepermisson": 1,
      "grade": 2
    },
    {
      "id": 23,
      "title": "审核列表",
      "rightId": 21,
      "key": "/audit-manage/list",
      "pagepermisson": 1,
      "grade": 2
    },
    {
      "id": 25,
      "title": "待发布",
      "rightId": 24,
      "key": "/publish-manage/unpublished",
      "pagepermisson": 1,
      "grade": 2
    },
    {
      "id": 26,
      "title": "已发布",
      "rightId": 24,
      "key": "/publish-manage/published",
      "pagepermisson": 1,
      "grade": 2
    },
    {
      "id": 27,
      "title": "已下线",
      "rightId": 24,
      "key": "/publish-manage/sunset",
      "pagepermisson": 1,
      "grade": 2
    }
  ],
  "rights": [
    {
      "id": 1,
      "title": "首页",
      "key": "/home",
      "pagepermisson": 1,
      "grade": 1
    },
    {
      "id": 2,
      "title": "用户管理",
      "key": "/user-manage",
      "pagepermisson": 1,
      "grade": 1
    },
    {
      "id": 7,
      "title": "权限管理",
      "key": "/right-manage",
      "pagepermisson": 1,
      "grade": 1
    },
    {
      "id": 14,
      "title": "新闻管理",
      "key": "/news-manage",
      "pagepermisson": 1,
      "grade": 1
    },
    {
      "id": 21,
      "title": "审核管理",
      "key": "/audit-manage",
      "pagepermisson": 1,
      "grade": 1
    },
    {
      "id": 24,
      "title": "发布管理",
      "key": "/publish-manage",
      "pagepermisson": 1,
      "grade": 1
    }
  ],
  "categories": [
    {
      "id": 1,
      "title": "时事新闻",
      "value": "时事新闻"
    },
    {
      "id": 2,
      "title": "环球经济",
      "value": "环球经济"
    },
    {
      "id": 3,
      "title": "科学技术",
      "value": "科学技术"
    },
    {
      "id": 4,
      "title": "军事世界",
      "value": "军事世界"
    },
    {
      "id": 5,
      "title": "世界体育",
      "value": "世界体育"
    },
    {
      "id": 6,
      "title": "生活理财",
      "value": "生活理财"
    }
  ],
  "regions": [
    {
      "id": 1,
      "title": "亚洲",
      "value": "亚洲"
    },
    {
      "id": 2,
      "title": "欧洲",
      "value": "欧洲"
    },
    {
      "id": 3,
      "title": "北美洲",
      "value": "北美洲"
    },
    {
      "id": 4,
      "title": "南美洲",
      "value": "南美洲"
    },
    {
      "id": 5,
      "title": "非洲",
      "value": "非洲"
    },
    {
      "id": 6,
      "title": "大洋洲",
      "value": "大洋洲"
    },
    {
      "id": 7,
      "title": "南极洲",
      "value": "南极洲"
    }
  ],
  "news": [
    {
      "title": "Introducing JSX",
      "categoryId": 2,
      "content": "<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">This funny tag syntax is neither a string nor HTML.</span></p>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.</span></p>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">JSX produces React “elements”. We will explore rendering them to the DOM in the</span> <a href=\"https://reactjs.org/docs/rendering-elements.html\" target=\"_self\"><span style=\"color: rgb(26,26,26);background-color: rgba(187,239,253,0.3);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">next section</span></a><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">. Below, you can find the basics of JSX necessary to get you started.</span></p>\n<h3 style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Why JSX?</span></h3>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.</span></p>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Instead of artificially separating</span> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><em>technologies</em></span> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">by putting markup and logic in separate files, React</span> <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\" target=\"_blank\"><span style=\"color: rgb(26,26,26);background-color: rgba(187,239,253,0.3);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">separates</span> <span style=\"color: rgb(26,26,26);background-color: rgba(187,239,253,0.3);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><em>concerns</em></span></a> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">with loosely coupled units called “components” that contain both. We will come back to components in a</span> <a href=\"https://reactjs.org/docs/components-and-props.html\" target=\"_self\"><span style=\"color: rgb(26,26,26);background-color: rgba(187,239,253,0.3);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">further section</span></a><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">, but if you’re not yet comfortable putting markup in JS,</span> <a href=\"https://www.youtube.com/watch?v=x7cQ3mrcKaY\" target=\"_blank\"><span style=\"color: rgb(26,26,26);background-color: rgba(187,239,253,0.3);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">this talk</span></a> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">might convince you otherwise.</span></p>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">React</span> <a href=\"https://reactjs.org/docs/react-without-jsx.html\" target=\"_self\"><span style=\"color: rgb(26,26,26);background-color: rgba(187,239,253,0.3);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">doesn’t require</span></a> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.</span></p>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">With that out of the way, let’s get started!</span></p>\n<h3 style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Embedding Expressions in JSX</span></h3>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">In the example below, we declare a variable called</span> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>name</code></span> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">and then use it inside JSX by wrapping it in curly braces:</span></p>\n<p style=\"text-align:start;\"></p>\n<pre style=\"margin-left:1rem;\"><br>&nbsp;</pre>\n",
      "region": "全球",
      "author": "admin",
      "roleId": 1,
      "auditState": 0,
      "publishState": 3,
      "createTime": 1615778715619,
      "star": 600,
      "view": 983,
      "id": 3,
      "publishTime": 1663472408199
    },
    {
      "title": "Rendering Elements",
      "categoryId": 3,
      "content": "<p style=\"text-align:start;\"></p>\n<h2 style=\"margin-left:0px;\"><span style=\"color: rgb(0,0,0);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">React Only Updates What’s Necessary</span></h2>\n<p style=\"margin-left:0px;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.</span></p>\n<p style=\"margin-left:0px;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">You can verify by inspecting the</span> <a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/update-rendered-element\" target=\"_blank\"><span style=\"color: rgb(26,26,26);background-color: rgba(187,239,253,0.3);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">last example</span></a> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">with the browser tools:</span></p>\n<p style=\"margin-left:0px;\"></p>\n<img src=\"https://reactjs.org/c158617ed7cc0eac8f58330e49e48224/granular-dom-updates.gif\" alt=\"DOM inspector showing granular updates\" style=\"height: ;width: \"/>\n<p style=\"margin-left:0px;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Even though we create an element describing the whole UI tree on every tick, only the text node whose contents have changed gets updated by React DOM.</span></p>\n<p style=\"margin-left:0px;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">In our experience, thinking about how the UI should look at any given moment, rather than how to change it over time, eliminates a whole class of bugs.</span></p>\n<p style=\"text-align:start;\"><span style=\"color: rgb(109,109,109);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Is this page useful?</span><a href=\"https://github.com/reactjs/reactjs.org/tree/master/content/docs/rendering-elements.md\" target=\"_self\"><span style=\"color: rgb(55,57,64);background-color: transparent;font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Edit this page</span></a>&nbsp;</p>\n",
      "region": "全球",
      "author": "admin",
      "roleId": 1,
      "auditState": 0,
      "publishState": 0,
      "createTime": 1615778740202,
      "star": 800,
      "view": 869,
      "id": 4,
      "publishTime": 1615778912481
    },
    {
      "title": "Components and Props",
      "categoryId": 4,
      "content": "<p><span style=\"color: rgb(109, 109, 109);\">Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. This page provides an introduction to the idea of components. You can find a</span> <a href=\"https://reactjs.org/docs/react-component.html\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"background-color: rgba(187, 239, 253, 0.3); color: rgb(26, 26, 26);\">detailed component API reference here</a><span style=\"color: rgb(109, 109, 109);\">.</span></p><p><span style=\"color: rgb(0, 0, 0);\">Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.</span></p><h2><br></h2><h2><span style=\"color: rgb(0, 0, 0);\">Let’s recap what happens in this example:</span></h2><ol><li><span style=\"color: rgb(26, 26, 26);\">We call</span> <code style=\"color: rgb(26, 26, 26);\">ReactDOM.render()</code> <span style=\"color: rgb(26, 26, 26);\">with the</span> <code style=\"color: rgb(26, 26, 26);\">&lt;Welcome name=\"Sara\" /&gt;</code> <span style=\"color: rgb(26, 26, 26);\">element.</span></li><li><span style=\"color: rgb(26, 26, 26);\">React calls the</span> <code style=\"color: rgb(26, 26, 26);\">Welcome</code> <span style=\"color: rgb(26, 26, 26);\">component with</span> <code style=\"color: rgb(26, 26, 26);\">{name: 'Sara'}</code> <span style=\"color: rgb(26, 26, 26);\">as the props.</span></li><li><span style=\"color: rgb(26, 26, 26);\">Our</span> <code style=\"color: rgb(26, 26, 26);\">Welcome</code> <span style=\"color: rgb(26, 26, 26);\">component returns a</span> <code style=\"color: rgb(26, 26, 26);\">&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code> <span style=\"color: rgb(26, 26, 26);\">element as the result.</span></li><li><span style=\"color: rgb(26, 26, 26);\">React DOM efficiently updates the DOM to match</span> <code style=\"color: rgb(26, 26, 26);\">&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code><span style=\"color: rgb(26, 26, 26);\">.</span></li></ol><p><strong style=\"background-color: rgba(255, 229, 100, 0.3); color: rgb(0, 0, 0);\">Note:</strong> <span style=\"background-color: rgba(255, 229, 100, 0.3); color: rgb(0, 0, 0);\">Always start component names with a capital letter.</span></p><p><span style=\"background-color: rgba(255, 229, 100, 0.3); color: rgb(0, 0, 0);\">React treats components starting with lowercase letters as DOM tags. For example,</span> <code style=\"background-color: rgba(255, 229, 100, 0.3); color: rgb(0, 0, 0);\">&lt;div /&gt;</code> <span style=\"background-color: rgba(255, 229, 100, 0.3); color: rgb(0, 0, 0);\">represents an HTML div tag, but</span> <code style=\"background-color: rgba(255, 229, 100, 0.3); color: rgb(0, 0, 0);\">&lt;Welcome /&gt;</code> <span style=\"background-color: rgba(255, 229, 100, 0.3); color: rgb(0, 0, 0);\">represents a component and requires</span> <code style=\"background-color: rgba(255, 229, 100, 0.3); color: rgb(0, 0, 0);\">Welcome</code> <span style=\"background-color: rgba(255, 229, 100, 0.3); color: rgb(0, 0, 0);\">to be in scope.</span></p><p><span style=\"background-color: rgba(255, 229, 100, 0.3); color: rgb(0, 0, 0);\">To learn more about the reasoning behind this convention, please read</span> <a href=\"https://reactjs.org/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"background-color: rgba(187, 239, 253, 0.3); color: rgb(26, 26, 26);\">JSX In Depth</a><span style=\"background-color: rgba(255, 229, 100, 0.3); color: rgb(0, 0, 0);\">.</span></p><p><br></p><p><span style=\"background-color: rgba(255, 229, 100, 0.3); color: rgb(0, 0, 0);\">ggggg</span></p><h2><br></h2><h2>&nbsp;</h2>",
      "region": "全球",
      "author": "admin",
      "roleId": 1,
      "auditState": 2,
      "createTime": 1615778777924,
      "star": 100,
      "view": 204,
      "id": 5,
      "publishTime": 1663554297706,
      "publishState": 3
    },
    {
      "title": "State and Lifecycle",
      "categoryId": 4,
      "content": "<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Now the clock ticks every second.</span></p>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Let’s quickly recap what’s going on and the order in which the methods are called:</span></p>\n<ol>\n<li style=\"margin-left:0px;\"><span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">When</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>&lt;Clock /&gt;</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">is passed to</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>ReactDOM.render()</code>, React calls the constructor of the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>Clock</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">component. Since</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>Clock</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">needs to display the current time, it initializes</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>this.state</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">with an object including the current time. We will later update this state.</span></li>\n<li style=\"margin-left:0px;\"><span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">React then calls the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>Clock</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">component’s</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>render()</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">method. This is how React learns what should be displayed on the screen. React then updates the DOM to match the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>Clock</code>’s render output.</span></li>\n<li style=\"margin-left:0px;\"><span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">When the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>Clock</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">output is inserted in the DOM, React calls the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>componentDidMount()</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">lifecycle method. Inside it, the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>Clock</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">component asks the browser to set up a timer to call the component’s</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>tick()</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">method once a second.</span></li>\n<li style=\"margin-left:0px;\"><span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Every second the browser calls the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>tick()</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">method. Inside it, the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>Clock</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">component schedules a UI update by calling</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>setState()</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">with an object containing the current time. Thanks to the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>setState()</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">call, React knows the state has changed, and calls the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>render()</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">method again to learn what should be on the screen. This time,</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>this.state.date</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">in the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>render()</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">method will be different, and so the render output will include the updated time. React updates the DOM accordingly.</span></li>\n<li style=\"margin-left:0px;\"><span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">If the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>Clock</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">component is ever removed from the DOM, React calls the</span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>componentWillUnmount()</code></span> <span style=\"color: rgb(26,26,26);font-size: medium;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">lifecycle method so the timer is stopped.</span></li>\n</ol>\n<h2 style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Using State Correctly</span></h2>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">There are three things you should know about</span> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>setState()</code>.</span></p>\n<h3 style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Do Not Modify State Directly</span></h3>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">For example, this will not re-render a component:</span></p>\n<p style=\"text-align:start;\"><br>&nbsp;</p>\n",
      "region": "全球",
      "author": "admin",
      "roleId": 1,
      "auditState": 0,
      "publishState": 0,
      "createTime": 1615778808893,
      "star": 300,
      "view": 454,
      "id": 6,
      "publishTime": 1615778916224
    },
    {
      "title": "Forms",
      "categoryId": 5,
      "content": "<h2 style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Controlled Components</span></h2>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">In HTML, form elements such as</span> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>&lt;input&gt;</code>,</span> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>&lt;textarea&gt;</code>, and</span> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>&lt;select&gt;</code></span> <span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with</span> <a href=\"https://reactjs.org/docs/react-component.html#setstate\" target=\"_self\"><span style=\"color: rgb(26,26,26);background-color: rgba(187,239,253,0.3);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code>setState()</code></span></a><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">.</span></p>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">We can combine the two by making the React state be the “single source of truth”. Then the React component that renders a form also controls what happens in that form on subsequent user input. An input form element whose value is controlled by React in this way is called a “controlled component”.</span></p>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">For example, if we want to make the previous example log the name when it is submitted, we can write the form as a controlled component:</span></p>\n<p style=\"text-align:start;\"><br>&nbsp;</p>\n",
      "region": "全球",
      "author": "admin",
      "roleId": 1,
      "auditState": 0,
      "createTime": 1615778852584,
      "star": 309,
      "view": 479,
      "id": 7,
      "publishTime": 1663554299635,
      "publishState": 3
    },
    {
      "title": "Thinking in React",
      "categoryId": 6,
      "content": "<p style=\"text-align:start;\"><span style=\"color: rgb(109,109,109);font-size: 18px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">React is, in our opinion, the premier way to build big, fast Web apps with JavaScript. It has scaled very well for us at Facebook and Instagram.</span></p>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">One of the many great parts of React is how it makes you think about apps as you build them. In this document, we’ll walk you through the thought process of building a searchable product data table using React.</span></p>\n<h2 style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Start With A Mock</span></h2>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Imagine that we already have a JSON API and a mock from our designer. The mock looks like this:</span></p>\n<p style=\"text-align:start;\"></p>\n<img src=\"https://reactjs.org/static/1071fbcc9eed01fddc115b41e193ec11/d4770/thinking-in-react-mock.png\" alt=\"Mockup\" style=\"height: 276.854px;width: 228px\"/>\n<p style=\"text-align:start;\"><span style=\"color: rgb(0,0,0);font-size: 17px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">Our JSON API returns some data that looks like this:</span></p>\n<p style=\"margin-left:0px;\"><br> <span style=\"font-size: 17px;\">The first thing you’ll want to do is to draw boxes around every component (and subcomponent) in the mock and give them all names. If you’re working with a designer, they may have already done this, so go talk to them! Their Photoshop layer names may end up being the names of your React components!</span></p>\n<p style=\"margin-left:0px;\"><span style=\"font-size: 17px;\">But how do you know what should be its own component? Use the same techniques for deciding if you should create a new function or object. One such technique is the</span> <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\" target=\"_blank\"><span style=\"color: rgb(26,26,26);background-color: rgba(187,239,253,0.3);font-size: 17px;\">single responsibility principle</span></a><span style=\"font-size: 17px;\">, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.</span></p>\n<p style=\"margin-left:0px;\"><span style=\"font-size: 17px;\">Since you’re often displaying a JSON data model to a user, you’ll find that if your model was built correctly, your UI (and therefore your component structure) will map nicely. That’s because UI and data models tend to adhere to the same</span> <span style=\"font-size: 17px;\"><em>information architecture</em>. Separate your UI into components, where each component matches one piece of your data model.</span></p>\n<p style=\"margin-left:0px;\"></p>\n<img src=\"https://reactjs.org/static/eb8bda25806a89ebdc838813bdfa3601/6b2ea/thinking-in-react-components.png\" alt=\"Component diagram\" style=\"height: 319.521px;width: 275px\"/>\n<p style=\"margin-left:0px;\"><span style=\"font-size: 17px;\">You’ll see here that we have five components in our app. We’ve italicized the data each component represents.</span></p>\n<ol>\n<li style=\"margin-left:0px;\"><span style=\"color: rgb(26,26,26);font-size: 16px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><code><strong>FilterableProductTable</strong></code></span> <span style=\"color: rgb(26,26,26);font-size: 16px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\"><strong>(orange):</strong></span> <span style=\"color: rgb(26,26,26);font-size: 16px;font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\">contains the entirety of the example</span><br>&nbsp;</li>\n</ol>\n",
      "region": "全球",
      "author": "admin",
      "roleId": 1,
      "auditState": 2,
      "createTime": 1615778891518,
      "star": 781,
      "view": 890,
      "id": 8,
      "publishTime": 1663554301204,
      "publishState": 2
    },
    {
      "title": "hhh",
      "categoryId": 3,
      "content": "<p>draft</p>",
      "region": "",
      "author": "admin",
      "roleId": 1,
      "auditState": 2,
      "publishState": 3,
      "createTime": 1662916309533,
      "star": 12,
      "view": 348,
      "id": 10
    },
    {
      "title": "666",
      "categoryId": 2,
      "content": "<p>&nbsp;{</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: rgb(156, 220, 254);\">path:</span> <span style=\"color: rgb(206, 145, 120);\">'/news-manage/category'</span>,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: rgb(156, 220, 254);\">element:</span> <span style=\"color: rgb(128, 128, 128);\">&lt;</span><span style=\"color: rgb(78, 201, 176);\">NewsCategory</span> <span style=\"color: rgb(128, 128, 128);\">/&gt;</span></p><p>&nbsp; &nbsp; &nbsp; &nbsp; },</p>",
      "region": "",
      "author": "admin",
      "roleId": 1,
      "auditState": 2,
      "createTime": 1662977312831,
      "star": 473,
      "view": 234,
      "id": 11,
      "publishState": 3,
      "publishTime": 1663472415648
    },
    {
      "title": "谷歌更新问题",
      "categoryId": 4,
      "content": "<p><strong><em>解决办法</em></strong></p><ul><li><strong><em>方法1：</em></strong></li></ul><p><strong><em>Google Update Service 出问题了，解决方法如下：按 Win+S 打开搜索框，搜索 Services，打开，进入后找到 Google Update Service，将服务都修改成自动更新，重新更新谷歌。第二次更新的时候可能会又被重置我也不知道啥原因，需要重新弄！然后如果更新时候有梯子一般都没问题，我这边挂梯子后，更新没碰上问题了！</em></strong></p><p><br></p><p>方法：2</p><p>直接去官网重新安装最新版谷歌选择覆盖安装</p>",
      "region": "",
      "author": "admin",
      "roleId": 1,
      "auditState": 2,
      "createTime": 1663143053047,
      "star": 892,
      "view": 436,
      "id": 12,
      "publishState": 2,
      "publishTime": 1663472825920
    },
    {
      "title": "原型和原型链解析",
      "categoryId": 3,
      "content": "<p>大家可以先仔细分析下该图一，然后让我们进入主题</p><p><br></p><p>prototype</p><p>首先来介绍下 prototype 属性。这是一个显式原型属性，只有函数才拥有该属性。基本上所有函数都有这个属性，但是也有一个例外</p><p><br></p><p>let fun = Function.prototype.bind()</p><p>如果你以上述方法创建一个函数，那么可以发现这个函数是不具有 prototype 属性的。</p><p><br></p><p>prototype 如何产生的</p><p><br></p><p>当我们声明一个函数时，这个属性就被自动创建了。</p><p><br></p><p>let a = function Foo() {}</p><p>并且这个属性的值是一个对象（也就是原型），只有一个属性 constructor</p><p><br></p><p><br></p><p><br></p><p>constructor 对应着构造函数，也就是 Foo()本身。</p><p><br></p><p><br></p><p><br></p><p>constructor</p><p><br></p><p>constructor 是一个公有且不可枚举的属性。一旦我们改变了函数的 prototype ，那么新对象就没有这个属性了（当然也可以通过原型链取到 constructor)</p><p><br></p><p>那么你肯定也有一个疑问，这个属性到底有什么用呢？其实这个属性可以说是一个历史遗留问题，在大部分情况下是没用的，在我的理解里，我认为他有两个作用：</p><p><br></p><p>让实例对象知道是什么函数构造了它；</p><p>如果想给某些类库中的构造函数增加一些自定义的方法，就可以通过 xx.constructor.method 来扩展。</p><p>_proto_</p><p>这是每个对象都有的隐式原型属性，指向了创建该对象的构造函数的原型。</p><p><br></p><p>其实这个属性指向了 [[prototype]]，但是 [[prototype]] 是内部属性，我们并不能访问到，所以使用 _proto_ 来访问。</p><p><br></p><p>因为在 JS 中是没有类的概念的，为了实现类似继承的方式，通过 _proto_ 将对象和原型联系起来组成原型链，得以让对象可以访问到不属于自己的属性。</p><p><br></p><p>实例对象的 _proto_ 如何产生的</p><p><br></p><p>function Foo() {}</p><p>// 这个函数是 Function 的实例对象</p><p>// function 就是一个语法糖</p><p>// 内部调用了 new Function(...)</p><p>从上图可知，当我们使用 new 操作符时，生成的实例对象拥有了 _proto_属性。</p><p><br></p><p>所以可以说，在 new 的过程中，新对象被添加了 _proto_ 并且链接到构造函数的原型上。</p><p><br></p><p>new 的过程:</p><p><br></p><p>新生成了一个对象</p><p>链接到原型</p><p>绑定 this</p><p>返回新对象</p><p>在调用 new 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 new</p><p><br></p><p>function _new(constructor, ...arg) {</p><p>&nbsp;var obj = {}; // 对应于上面的步骤 1</p><p>&nbsp;obj.__proto__ = constructor.prototype; // 对应于上面的步骤 2</p><p>&nbsp;</p><p>&nbsp;var res = constructor.apply(obj, arg); // 对应于上面的步骤 3</p><p>&nbsp;</p><p>&nbsp;return Object.prototype.toString.call(res) === '[object Object]' ? res : obj; // 对应于上面的步骤 4</p><p>}</p><p>&nbsp;</p><p>const Fun = function(name) {</p><p>&nbsp;this.name = name;</p><p>};</p><p>&nbsp;</p><p>console.log(_new(Fun, '小明'));</p><p>&nbsp;</p><p>// Fun {name: \"小明\"}</p><p><br></p><p>对于实例对象来说，都是通过 new 产生的，无论是 function Foo() 还是 let a = { b : 1 } 。</p><p><br></p><p>对于创建一个对象来说，更推荐使用字面量的方式创建对象。</p><p><br></p><p>因为你使用 new Object() 的方式创建对象需要通过作用域链一层层找到 Object，但是你使用字面量的方式就没这个问题。</p><p><br></p><p>function Foo() {}</p><p>// function 就是个语法糖</p><p>// 内部等同于 new Function()</p><p>let a = { b: 1 }</p><p>// 这个字面量内部也是使用了 new Object()</p><p>Function.__proto __=== Function.prototype</p><p>对于对象来说，xx.__proto__.contrcutor 是该对象的构造函数，但是在图中我们可以发现 Function.__proto__ === Function.prototype，难道这代表着 Function 自己产生了自己?</p><p><br></p><p>答案肯定是否认的，要说明这个问题我们先从 Object 说起。</p><p><br></p><p>从开头的原型图片我们可以发现，所有对象都可以通过原型链最终找到 Object.prototype ，虽然 Object.prototype 也是一个对象，但是这个对象却不是 Object 创造的，而是JS引擎自己创建了 Object.prototype 。所以可以这样说，所有实例都是对象，但是对象不一定都是实例。</p><p><br></p><p>接下来我们来看 Function.prototype 这个特殊的对象，如果你在浏览器将这个对象打印出来，会发现这个对象其实是一个函数。</p><p><br></p><p><br></p><p><br></p><p>我们知道函数都是通过 new Function() 生成的，难道 Function.prototype 也是通过 new Function() 产生的吗？答案也是否定的，这个函数也是引擎自己创建的。首先引擎创建了 Object.prototype ，然后创建了 Function.prototype ，并且通过 __proto__ 将两者联系了起来。这里也很好的解释了上面的一个问题，为什么 let fun = Function.prototype.bind() 没有 prototype 属性。因为 Function.prototype 是引擎创建出来的对象，引擎认为不需要给这个对象添加 prototype 属性。</p><p><br></p><p>所以我们又可以得出一个结论，不是所有函数都是 new Function() 产生的。</p><p><br></p><p>有了 Function.prototype 以后才有了 function Function() ，然后其他的构造函数都是 function Function() 生成的。</p><p><br></p><p>现在可以来解释 Function.__proto__ === Function.prototype 这个问题了。因为先有的 Function.prototype 以后才有的 function Function() ，所以也就不存在鸡生蛋蛋生鸡的悖论问题了。对于为什么 Function.__proto__ 会等于 Function.prototype 。</p><p><br></p><p>个人的理解是：其他所有的构造函数都可以通过原型链找到 Function.prototype ，并且 function Function() 本质也是一个函数，为了不产生混乱就将 function Function() 的 __proto__ 联系到了 Function.prototype 上。</p><p><br></p><p>总结</p><p>Object 是所有对象的爸爸，所有对象都可以通过 __proto__ 找到它</p><p>Function 是所有函数的爸爸，所有函数都可以通过 __proto__ 找到它</p><p>Function.prototype 和 Object.prototype 是两个特殊的对象，他们由引擎来创建</p><p>除了以上两个特殊对象，其他对象都是通过构造器 new 出来的</p><p>函数的 prototype 是一个对象，也就是原型</p><p>对象的 __proto__ 指向构造它的原型， __proto__ 将对象和原型连接起来组成了原型链。</p>",
      "region": "",
      "author": "admin",
      "roleId": 1,
      "auditState": 2,
      "createTime": 1663249840198,
      "star": 392,
      "view": 5063,
      "id": 13,
      "publishState": 2,
      "publishTime": 1663472823785
    },
    {
      "title": "我是哒干蛋",
      "categoryId": 2,
      "content": "<p><strong>全局对象描述</strong></p><p>\t<span style=\"color: rgb(51, 51, 51);\">全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。全局对象不是任何对象的属性，所以它没有名称。</span></p><p><span style=\"color: rgb(51, 51, 51);\">全局属性和函数可用于所有内建的 JavaScript 对象。</span></p>",
      "region": "南极洲",
      "author": "钢蛋",
      "roleId": 2,
      "auditState": 2,
      "publishState": 2,
      "createTime": 1663406414319,
      "star": 89,
      "view": 949,
      "id": 14,
      "publishTime": 1663572868095
    },
    {
      "title": "竹林海是大大滴",
      "categoryId": 1,
      "content": "<p><span style=\"color: rgb(77, 77, 77);\">1.event.stopPropagation()方法</span></p><p>\t<span style=\"color: rgb(77, 77, 77);\">这是阻止事件的冒泡方法，不让事件向document上蔓延，但是默认事件任然会执行，当你掉用这个方法的时候，如果点击一个连接，这个连接仍然会被打开，</span></p><p><span style=\"color: rgb(77, 77, 77);\">2.event.preventDefault()方法</span></p><p>\t<span style=\"color: rgb(77, 77, 77);\">这是阻止默认事件的方法，调用此方法是，连接不会被打开，但是会发生冒泡，冒泡会传递到上一层的父元素；</span></p><p><span style=\"color: rgb(77, 77, 77);\">3.return false ；</span></p><p>\t<span style=\"color: rgb(77, 77, 77);\">这个方法比较暴力，它会同时阻止事件冒泡和默认事件；写上此代码，连接不会被打开，事件也不会传递到上一层的父元素；可以理解为return false就等于同时调用了event.stopPropagation()和event.preventDefault()</span></p>",
      "region": "非洲",
      "author": "竹林海",
      "roleId": 3,
      "auditState": 2,
      "publishState": 1,
      "createTime": 1663406985894,
      "star": 428,
      "view": 298,
      "id": 15
    },
    {
      "title": "南极洲的小白龙",
      "categoryId": 2,
      "content": "<p><strong>全局作用域</strong>：</p><ul><li class=\"ql-indent-1\"><span style=\"color: rgb(51, 51, 51);\">网页打开时创建，关闭时销毁，全局变量在任何地方都可以访问到。</span></li><li class=\"ql-indent-1\"><span style=\"color: rgb(51, 51, 51);\">全局作用域三种情形：最外层函数和变量、未用var声明的变量、window对象属性和方法。</span></li></ul><p><strong style=\"color: rgb(51, 51, 51);\">函数作用域</strong><span style=\"color: rgb(51, 51, 51);\">：</span></p><ul><li class=\"ql-indent-1\">函数内部定义的变量和函数的参数。</li><li class=\"ql-indent-1\"><span style=\"color: rgb(51, 51, 51);\">网页打开时创建，关闭时销毁，局部变量，在局部任意地方都可以访问。</span></li></ul><p><strong>块级作用域</strong>：<span style=\"color: rgb(51, 51, 51);\">使用let或const声明+大括号括住。</span>凡是带{}都是块级作用域 。</p>",
      "region": "南极洲",
      "author": "竹林海",
      "roleId": 3,
      "auditState": 3,
      "publishState": 0,
      "createTime": 1663407496396,
      "star": 744,
      "view": 277,
      "id": 16
    },
    {
      "title": "test",
      "categoryId": 1,
      "content": "<p>666666</p>",
      "region": "",
      "author": "admin",
      "roleId": 1,
      "auditState": 2,
      "createTime": 1663466102544,
      "star": 184,
      "view": 200,
      "id": 17,
      "publishState": 3,
      "publishTime": 1663554302810
    },
    {
      "title": "王朝马汉",
      "categoryId": 3,
      "content": "<h3>箭头函数</h3><ol><li><span style=\"color: rgba(0, 0, 0, 0.75);\">没有自己的this，this来自上层</span><strong style=\"color: rgba(0, 0, 0, 0.75);\">函数作用域</strong><span style=\"color: rgba(0, 0, 0, 0.75);\">（对象作用域没有this），故没有自己的作用域。</span></li><li><span style=\"color: rgba(0, 0, 0, 0.75);\">如果箭头函数仅有一个表达式，那么该表达式的结果会被隐式返回表达式的结果，不像普通函数一样undefined。</span></li><li><span style=\"color: rgba(0, 0, 0, 0.75);\">普通函数内部，</span><span style=\"color: rgb(33, 37, 41);\">参数对象（arguments）</span><span style=\"color: rgba(0, 0, 0, 0.75);\">为特殊的类数组对象。包含了函数被调用时的参数列表。箭头函数内部是没有arguments对象，同this一样，依赖于外部非箭头函数。</span></li><li>箭头函数的this指向不会改变，call()、apply()、bind()等方法不能改变箭头函数中的this指向 。</li><li>箭头函数没有原型。</li></ol><p>思否：<a href=\"https://segmentfault.com/a/1190000021380336\" rel=\"noopener noreferrer\" target=\"_blank\">箭头函数和普通函数的区别</a>。</p><p>CSND: <a href=\"https://blog.csdn.net/qq_40713392/article/details/106319971\" rel=\"noopener noreferrer\" target=\"_blank\">js箭头函数和普通函数的区别</a>。</p>",
      "region": "",
      "author": "admin",
      "roleId": 1,
      "auditState": 2,
      "publishState": 3,
      "createTime": 1663554974377,
      "star": 180,
      "view": 749,
      "id": 18,
      "publishTime": 1663554984699
    },
    {
      "title": "刚蛋蛋",
      "categoryId": 4,
      "content": "<p>本文将给大家带来redux和react-redux的快速使用，以理论+代码+案例的形式教大家如何在react中去使用状态管理，以实现数据的高效通信🚀</p><p>如果本文有不对、疑惑的地方，欢迎在评论区留言指正🌻</p><p><strong>长文预警</strong>： 本文文字代码较多，请耐心观看，相信你会有所收获🍺</p><h2>一、什么是 redux</h2><p><code>Redux</code> 是 <code>JavaScript</code> 状态容器，提供可预测化的状态管理。可以理解为全局数据状态管理工具，用来做组件通信等。</p><h2>二、为什么使用 redux</h2><p>当没有使用 <code>redux</code> 时兄弟组件间传值将很麻烦，代码很复杂冗余。使用 <code>redux</code> 定义全局单一的数据 <code>Store</code>，可以自定义 <code>Store</code> 里面存放哪些数据，整个数据结构也是自己清楚的。</p><p><br></p><p>作者：CoderBin</p><p>链接：https://juejin.cn/post/7141243532647333895</p><p>来源：稀土掘金</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>",
      "region": "南极洲",
      "author": "钢蛋",
      "roleId": 2,
      "auditState": 2,
      "publishState": 2,
      "createTime": 1663572864174,
      "star": 860,
      "view": 181,
      "id": 19,
      "publishTime": 1663850543953
    },
    {
      "title": "js内置类型",
      "categoryId": 4,
      "content": "<p>JS 中分为七种内置类型，七种内置类型⼜分为两⼤类型：基本类型和对象（Object）。 </p><p>基本类型有六种： <strong>null ， undefined ， boolean ， number ， string ， symbol 。</strong> </p><p>其中 JS 的数字类型是浮点类型的，没有整型。并且浮点类型基于 IEEE 754标准实现，在使 </p><p>⽤中会遇到某些 Bug。</p><p> NaN 也属于 number 类型，并且 NaN 不等于⾃身。 </p><p>对于基本类型来说，如果使⽤字⾯量的⽅式，那么这个变量只是个字⾯量，只有在必要的时 </p><p>候才会转换为对应的类型。</p><pre class=\"ql-syntax\" spellcheck=\"false\">let a = 111; // 这只是字面量,不是number类型\na.toString() // 使用时候才会转换为对象类型。\n</pre><p>对象（Object）是引⽤类型，在使⽤过程中会遇到浅拷⻉和深拷⻉的问题。</p><pre class=\"ql-syntax\" spellcheck=\"false\">let a = { name: 'FE' }\nlet b = a \nb.name = 'EF'\nconsole.log(a.name) // EF\n</pre><h1>Typeof</h1><p>typeof 对于基本类型，除了 null 都可以显示正确的类型。</p><pre class=\"ql-syntax\" spellcheck=\"false\">typeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof undefined // 'undefined'\ntypeof true // 'boolean'\ntypeof Symbol() // 'symbol'\ntypeof b // b 没有声明，但是还会显示 undefined\n</pre><p><span style=\"color: rgb(38, 38, 38);\">typeof 对于对象，除了函数都会显示 object</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">typeof [] // 'object'\ntypeof {} // 'object'\ntypeof console.log // 'function'\n</pre><p><span style=\"color: rgb(38, 38, 38);\">对于 null 来说，虽然它是基本类型，但是会显示 object ，这是⼀个存在很久了的 Bug</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">typeof null // 'object'\n</pre><p><span style=\"color: rgb(38, 38, 38);\">为什么会出现这种情况呢？因为在 JS 的最初版本中，使⽤的是 32 位系统，为了性能考 </span></p><p><span style=\"color: rgb(38, 38, 38);\">虑使⽤低位存储了变量的类型信息， 000 开头代表是对象，然⽽ null 表示为全零，所以将 </span></p><p><span style=\"color: rgb(38, 38, 38);\">它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却 </span></p><p><span style=\"color: rgb(38, 38, 38);\">是⼀直流传下来。</span></p><p><span style=\"color: rgb(38, 38, 38);\">如果我们想获得⼀个变量的正确类型，可以通过</span><strong style=\"color: rgb(38, 38, 38);\"> Object.prototype.toString.call(xx)</strong><span style=\"color: rgb(38, 38, 38);\"> 。 </span></p><p><span style=\"color: rgb(38, 38, 38);\">这样我们就可以获得类似 [object Type] 的字符串。</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">let a\n// 我们也可以这样判断 undefined\na === undefined\n// 但是 undefined 不是保留字，能够在低版本浏览器被赋值\nlet undefined = 1\n// 这样判断就会出错\n// 所以可以⽤下⾯的⽅式来判断，并且代码量更少\n// 因为 void 后⾯随便跟上⼀个组成表达式\n// 返回就是 undefined\na === void 0\n</pre><h1><span style=\"color: rgb(38, 38, 38);\">类型转换 </span></h1><p><strong style=\"color: rgb(38, 38, 38);\">转Boolean </strong></p><p><span style=\"color: rgb(38, 38, 38);\">在条件判断时，除了 </span><strong style=\"color: rgb(38, 38, 38);\">undefined ， null ， false ， NaN ， '' ， 0 ， -0 ，</strong><span style=\"color: rgb(38, 38, 38);\">其他所有 </span></p><p><span style=\"color: rgb(38, 38, 38);\">值都转为 true ，包括所有对象。</span></p><p><br></p><h1><strong style=\"color: rgb(38, 38, 38);\">对象转基本类型</strong></h1><p><span style=\"color: rgb(38, 38, 38);\">对象在转换基本类型时，⾸先会调⽤ valueOf 然后调⽤ toString 。并且这两个⽅法你是 </span></p><p><span style=\"color: rgb(38, 38, 38);\">可以重写的。</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">let a = {\n valueOf() {\n return 0\n }\n}\n</pre><p><span style=\"color: rgb(38, 38, 38);\">当然你也可以重写 Symbol.toPrimitive ，该⽅法在转基本类型时调⽤优先级最⾼。</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">let a = {\n valueOf() {\n return 0;\n },\n toString() {\n return '1';\n },\n [Symbol.toPrimitive]() {\n return 2;\n }\n}1 + a // =&gt; 3\n'1' + a // =&gt; '12'\n</pre><p><strong style=\"color: rgb(38, 38, 38);\">四则运算符 </strong></p><p><span style=\"color: rgb(38, 38, 38);\">只有当加法运算时，其中⼀⽅是字符串类型，就会把另⼀个也转为字符串类型。其他运算只 </span></p><p><span style=\"color: rgb(38, 38, 38);\">要其中⼀⽅是数字，那么另⼀⽅就转为数字。并且加法运算会触发三种类型转换：将值转换 </span></p><p><span style=\"color: rgb(38, 38, 38);\">为原始值，转换为数字，转换为字符串。</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">1 + '1' // '11'\n2 * '2' // 4\n[1, 2] + [2, 1] // '1,22,1' // 数组转化为字符串再相加\n// [1, 2].toString() -&gt; '1,2'\n// [2, 1].toString() -&gt; '2,1'\n// '1,2' + '2,1' = '1,22,1'\n</pre><p><span style=\"color: rgb(38, 38, 38);\">对于加号需要注意这个表达式 'a' + + 'b</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">'a' + + 'b' // -&gt; \"aNaN\"\n// 因为 + 'b' -&gt; NaN-&gt; + 拼接字符 为NaN\n// 你也许在⼀些代码中看到过 + '1' -&gt; 1 -&gt; + 拼接字符串数字为数字本身\n</pre><h1><span style=\"color: rgb(38, 38, 38);\">== 操作符</span></h1><p><br></p><p><span style=\"color: rgb(38, 38, 38);\">上图中的 toPrimitive 就是对象转基本类型。 </span></p><p><span style=\"color: rgb(38, 38, 38);\">这⾥来解析⼀道题⽬ [] == ![] // -&gt; true ，下⾯是这个表达式为何为 true 的步骤：</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">// [] 转成 true，然后取反变成 false\n[] == false\n// 根据第 8 条得出\n[] == ToNumber(false)\n[] == 0\n// 根据第 10 条得出\nToPrimitive([]) == 0\n// [].toString() -&gt; ''\n'' == 0\n// 根据第 6 条得出\n0 == 0 // -&gt; true\n</pre><p><strong style=\"color: rgb(38, 38, 38);\">⽐较运算符 </strong></p><p><span style=\"color: rgb(38, 38, 38);\">1. 如果是对象，就通过 toPrimitive 转换对象 </span></p><p><span style=\"color: rgb(38, 38, 38);\">2. 如果是字符串，就通过 unicode 字符索引来⽐较</span></p>",
      "region": "",
      "author": "admin",
      "roleId": 1,
      "auditState": 2,
      "publishState": 2,
      "createTime": 1663849758529,
      "star": 394,
      "view": 862,
      "id": 20,
      "publishTime": 1663849769163
    },
    {
      "title": "箭头函数",
      "categoryId": 3,
      "content": "<h3>箭头函数</h3><ol><li><span style=\"color: rgba(0, 0, 0, 0.75);\">没有自己的this，this来自上层</span><strong style=\"color: rgba(0, 0, 0, 0.75);\">函数作用域</strong><span style=\"color: rgba(0, 0, 0, 0.75);\">（对象作用域没有this），故没有自己的作用域。</span></li><li><span style=\"color: rgba(0, 0, 0, 0.75);\">如果箭头函数仅有一个表达式，那么该表达式的结果会被隐式返回表达式的结果，不像普通函数一样undefined。</span></li><li><span style=\"color: rgba(0, 0, 0, 0.75);\">普通函数内部，</span><span style=\"color: rgb(33, 37, 41);\">参数对象（arguments）</span><span style=\"color: rgba(0, 0, 0, 0.75);\">为特殊的类数组对象。包含了函数被调用时的参数列表。箭头函数内部是没有arguments对象，同this一样，依赖于外部非箭头函数。</span></li><li>箭头函数的this指向不会改变，call()、apply()、bind()等方法不能改变箭头函数中的this指向 。</li><li>箭头函数没有原型。</li></ol><p>思否：<a href=\"https://segmentfault.com/a/1190000021380336\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(24, 144, 255);\">箭头函数和普通函数的区别</a>。</p><p>CSND:&nbsp;<a href=\"https://blog.csdn.net/qq_40713392/article/details/106319971\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(24, 144, 255);\">js箭头函数和普通函数的区别</a>。</p>",
      "region": "",
      "author": "admin",
      "roleId": 1,
      "auditState": 2,
      "publishState": 2,
      "createTime": 1663850049850,
      "star": 451,
      "view": 179,
      "id": 21,
      "publishTime": 1663850058883
    },
    {
      "title": "原型原型链",
      "categoryId": 5,
      "content": "<h2><br></h2><p><br></p><p><strong style=\"color: rgb(36, 41, 47);\">大家可以先仔细分析下该图一，然后让我们进入主题</strong></p><p><br></p><h2><span style=\"color: rgb(36, 41, 47);\">prototype</span></h2><p><span style=\"color: rgb(36, 41, 47);\">首先来介绍下 prototype 属性。这是一个显式原型属性，</span><strong style=\"color: rgb(245, 34, 45);\">只有函数才拥有该属性</strong><span style=\"color: rgb(36, 41, 47);\">。基本上所有函数都有这个属性，但是也有一个例外</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">let fun = Function.prototype.bind()\n</pre><p><span style=\"color: rgb(36, 41, 47);\">如果你以上述方法创建一个函数，那么可以发现这个函数是不具有 prototype 属性的。</span></p><h4><span style=\"color: rgb(36, 41, 47);\">prototype 如何产生的</span></h4><p><span style=\"color: rgb(36, 41, 47);\">当我们声明一个函数时，这个属性就被自动创建了。</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">let a = function Foo() {}\n</pre><p><span style=\"color: rgb(36, 41, 47);\">并且这个属性的值是一个对象（也就是原型），只有一个属性 constructor</span></p><p><br></p><p><br></p><p><span style=\"color: rgb(36, 41, 47);\">constructor 对应着构造函数，也就是 Foo()本身。</span></p><p><br></p><h4><span style=\"color: rgb(36, 41, 47);\">constructor</span></h4><p><span style=\"color: rgb(36, 41, 47);\">constructor 是一个公有且不可枚举的属性。一旦我们改变了函数的 prototype ，那么新对象就没有这个属性了（当然也可以通过原型链取到 constructor)</span></p><p><br></p><p><span style=\"color: rgb(36, 41, 47);\">那么你肯定也有一个疑问，这个属性到底有什么用呢？其实这个属性可以说是一个历史遗留问题，在大部分情况下是没用的，在我的理解里，我认为他有两个作用：</span></p><ul><li><span style=\"color: rgb(36, 41, 47);\">让实例对象知道是什么函数构造了它；</span></li><li><span style=\"color: rgb(36, 41, 47);\">如果想给某些类库中的构造函数增加一些自定义的方法，就可以通过 xx.constructor.method 来扩展。</span></li></ul><p><br></p><h2><span style=\"color: rgb(36, 41, 47);\">_proto_</span></h2><p><span style=\"color: rgb(36, 41, 47);\">这是每个对象都有的隐式原型属性，</span><strong style=\"color: rgb(245, 34, 45);\">指向了创建该对象的构造函数的原型</strong><span style=\"color: rgb(36, 41, 47);\">。</span></p><p><span style=\"color: rgb(36, 41, 47);\">其实这个属性指向了 [[prototype]]，但是 [[prototype]] 是内部属性，我们并不能访问到，所以使用 _proto_ 来访问。</span></p><p><span style=\"color: rgb(36, 41, 47);\">因为在 JS 中是没有类的概念的，为了实现类似继承的方式，通过</span><strong style=\"color: rgb(36, 41, 47);\"> _proto_ 将对象和原型联系起来组成原型链</strong><span style=\"color: rgb(36, 41, 47);\">，得以让对象可以访问到不属于自己的属性。</span></p><p><strong style=\"color: rgb(36, 41, 47);\">实例对象的 _proto_ 如何产生的</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">function Foo() {}\n// 这个函数是 Function 的实例对象\n// function 就是一个语法糖\n// 内部调用了 new Function(...)\n</pre><p><span style=\"color: rgb(36, 41, 47);\">从上图可知，当我们使用 new 操作符时，生成的实例对象拥有了 _proto_属性。</span></p><p><span style=\"color: rgb(36, 41, 47);\">所以可以说，在 new 的过程中，新对象被添加了 _proto_ 并且链接到构造函数的原型上。</span></p><p><strong style=\"color: rgb(232, 50, 60);\">new 的过程:</strong></p><ol><li><span style=\"color: rgb(36, 41, 47);\">新生成了一个对象</span></li><li><span style=\"color: rgb(36, 41, 47);\">链接到原型</span></li><li><span style=\"color: rgb(36, 41, 47);\">绑定 this</span></li><li><span style=\"color: rgb(36, 41, 47);\">返回新对象</span></li></ol><p><span style=\"color: rgb(36, 41, 47);\">在调用 new 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 new</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">function _new(constructor, ...arg) {\n  var obj = {}; // 对应于上面的步骤 1\n  obj.__proto__ = constructor.prototype; // 对应于上面的步骤 2\n\n  var res = constructor.apply(obj, arg); // 对应于上面的步骤 3\n\n  return Object.prototype.toString.call(res) === '[object Object]' ? res : obj; // 对应于上面的步骤 4\n}\n\nconst Fun = function(name) {\n  this.name = name;\n};\n\nconsole.log(_new(Fun, '小明'));\n\n// Fun {name: \"小明\"}\n</pre><p><span style=\"color: rgb(36, 41, 47);\">对于实例对象来说，都是通过 new 产生的，无论是 function Foo() 还是 </span><strong style=\"color: rgb(36, 41, 47);\">let a = { b : 1 } 。</strong></p><p><span style=\"color: rgb(36, 41, 47);\">对于创建一个对象来说，更推荐使用字面量的方式创建对象。</span></p><p><span style=\"color: rgb(36, 41, 47);\">因为你使用</span><strong style=\"color: rgb(36, 41, 47);\"> new Object()</strong><span style=\"color: rgb(36, 41, 47);\"> 的方式创建对象需要通过</span><strong style=\"color: rgb(36, 41, 47);\">作用域链</strong><span style=\"color: rgb(36, 41, 47);\">一层层找到 Object，但是你使用字面量的方式就没这个问题。</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">function Foo() {}\n// function 就是个语法糖\n// 内部等同于 new Function()\nlet a = { b: 1 }\n// 这个字面量内部也是使用了 new Object()\n</pre><h2><span style=\"color: rgb(36, 41, 47);\">Function.__</span><strong style=\"color: rgb(36, 41, 47);\">proto</strong><span style=\"color: rgb(36, 41, 47);\"> __=== Function.prototype</span></h2><p><span style=\"color: rgb(36, 41, 47);\">对于对象来说，xx.__proto__.contrcutor 是该对象的构造函数，但是在图中我们可以发现 Function.__proto__ === Function.prototype，难道这代表着 Function 自己产生了自己?</span></p><p><span style=\"color: rgb(36, 41, 47);\">答案</span><strong style=\"color: rgb(36, 41, 47);\">肯定是否认的</strong><span style=\"color: rgb(36, 41, 47);\">，要说明这个问题我们先从 Object 说起。</span></p><p><span style=\"color: rgb(36, 41, 47);\">从开头的原型图片我们可以发现，所有对象都可以通过原型链最终找到 Object.prototype ，虽然 Object.prototype 也是一个对象，但是这个对象却不是 Object 创造的，而是</span><strong style=\"color: rgb(36, 41, 47);\">JS引擎</strong><span style=\"color: rgb(36, 41, 47);\">自己创建了 Object.prototype 。所以可以这样说，所有实例都是对象，但是对象不一定都是实例。</span></p><p><span style=\"color: rgb(36, 41, 47);\">接下来我们来看 Function.prototype 这个特殊的对象，如果你在浏览器将这个对象打印出来，会发现这个对象其实是一个函数。</span></p><p><br></p><p>\t<span style=\"color: rgb(36, 41, 47);\">我们知道函数都是通过 new Function() 生成的，难道 Function.prototype 也是通过 new Function() 产生的吗？答案也是否定的，这个函数也是引擎自己创建的。首先引擎创建了</span><span style=\"color: rgb(245, 34, 45);\"> </span><strong style=\"color: rgb(245, 34, 45);\">Object.prototype</strong><strong style=\"color: rgb(36, 41, 47);\"> </strong><span style=\"color: rgb(36, 41, 47);\">，然后创建了 </span><strong style=\"color: rgb(245, 34, 45);\">Function.prototype</strong><span style=\"color: rgb(36, 41, 47);\"> ，并且通过 __proto__ 将两者联系了起来。这里也很好的解释了上面的一个问题，为什么 let fun = Function.prototype.bind() 没有 prototype 属性。</span><strong style=\"color: rgb(245, 34, 45);\">因为 Function.prototype 是引擎创建出来的对象，引擎认为不需要给这个对象添加 prototype 属性。</strong></p><p><strong style=\"color: rgb(36, 41, 47);\">所以我们又可以得出一个结论，不是所有函数都是 new Function() 产生的。</strong></p><p>\t<span style=\"color: rgb(36, 41, 47);\">有了 Function.prototype 以后才有了 function Function() ，然后其他的构造函数都是 function Function() 生成的。</span></p><p>\t<span style=\"color: rgb(36, 41, 47);\">现在可以来解释 Function.__proto__ === Function.prototype 这个问题了。因为先有的 Function.prototype 以后才有的 function Function() ，所以也就不存在鸡生蛋蛋生鸡的悖论问题了。对于为什么 Function.__proto__ 会等于 Function.prototype 。</span></p><p>\t<span style=\"color: rgb(36, 41, 47);\">个人的理解是：其他所有的构造函数都可以通过原型链找到 Function.prototype ，并且 function Function() 本质也是一个函数，为了不产生混乱就将 function Function() 的 __proto__ 联系到了 Function.prototype 上。</span></p><p><br></p><h2><span style=\"color: rgb(36, 41, 47);\">总结</span></h2><ul><li><span style=\"color: rgb(36, 41, 47);\">Object 是所有对象的爸爸，所有对象都可以通过 __proto__ 找到它</span></li><li><span style=\"color: rgb(36, 41, 47);\">Function 是所有函数的爸爸，所有函数都可以通过 __proto__ 找到它</span></li><li><strong style=\"color: rgb(36, 41, 47);\">Function.prototype</strong><span style=\"color: rgb(36, 41, 47);\"> 和 </span><strong style=\"color: rgb(36, 41, 47);\">Object.prototype</strong><span style=\"color: rgb(36, 41, 47);\"> 是两个特殊的对象，他们由引擎来创建</span></li><li><span style=\"color: rgb(36, 41, 47);\">除了以上两个特殊对象，其他对象都是通过构造器 new 出来的</span></li><li><span style=\"color: rgb(36, 41, 47);\">函数的 prototype 是一个对象，也就是原型</span></li><li><span style=\"color: rgb(36, 41, 47);\">对象的 __proto__ 指向构造它的原型， __proto__ 将对象和原型连接起来组成了原型链。</span></li></ul><p><br></p>",
      "region": "",
      "author": "admin",
      "roleId": 1,
      "auditState": 2,
      "publishState": 2,
      "createTime": 1663850110706,
      "star": 59,
      "view": 297,
      "id": 22,
      "publishTime": 1663850122682
    },
    {
      "title": "new &&instanceof",
      "categoryId": 6,
      "content": "<h1>new</h1><ol><li>创建一个空对象。</li><li>新对象隐式原型<strong>proto</strong>链接到构造函数显式原型prototype上</li><li>执行构造函数 并将构造函数作用域指向新对象</li><li>如果该函数没有返回对象，则返回 this( 返回this实际是返回一个空对象， new Object()就是返回一个空对象{} )。</li></ol><p>在调⽤ new 的过程中会发⽣以上四件事情，我们也可以试着来⾃⼰实现⼀个 new:</p><pre class=\"ql-syntax\" spellcheck=\"false\">function _new(constructor, ...arg) {\n  var obj = {}; // 对应于上面的步骤 1\n  obj.__proto__ = constructor.prototype; // 对应于上面的步骤 2\n\n  var res = constructor.apply(obj, arg); // 对应于上面的步骤 3\n\n  return Object.prototype.toString.call(res) === '[object Object]' ? res : obj; // 对应于上面的步骤 4\n}\n\nconst Fun = function(name) {\n  this.name = name;\n};\n\nconsole.log(_new(Fun, '小明'));\n\n// Fun {name: \"小明\"}\n</pre><p>对于实例对象来说，都是通过 new 产⽣的，⽆论是 function Foo() 还是 let a = { b : </p><p>1 } 。 </p><p>对于创建⼀个对象来说，更推荐使⽤字⾯量的⽅式创建对象（⽆论性能上还是可读性）。因 </p><p>为你使⽤ new Object() 的⽅式创建对象需要通过作⽤域链⼀层层找到 Object ，但是你使 </p><p>⽤字⾯量的⽅式就没这个问题。</p><pre class=\"ql-syntax\" spellcheck=\"false\">function Foo() {}\n// function 就是个语法糖\n// 内部等同于 new Function()\nlet a = { b: 1 }\n// 这个字⾯量内部也是使⽤了 new Object()\n</pre><p>对于 new 来说，还需要注意下运算符优先级。</p><pre class=\"ql-syntax\" spellcheck=\"false\">function Foo() {\n return this; }\nFoo.getName = function () {\n console.log('1');\n};\nFoo.prototype.getName = function () {\n console.log('2');\n};\nnew Foo.getName(); // -&gt; 1\nnew Foo().getName(); // -&gt; 2\n</pre><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/2532466/1652941427348-6aa80821-162f-4f5c-bd4e-92f36d88e5be.png\" width=\"719.2727272727273\"></p><p><br></p><p>从上图可以看出， new Foo() 的优先级⼤于 new Foo ，所以对于上述代码来说可以这样划 </p><p>分执⾏顺序</p><pre class=\"ql-syntax\" spellcheck=\"false\">new (Foo.getName()); \n(new Foo()).getName();\n</pre><p><span style=\"color: rgb(38, 38, 38);\">对于第⼀个函数来说，先执⾏了 Foo.getName() ，所以结果为 1；对于后者来说，先执⾏ </span></p><p><span style=\"color: rgb(38, 38, 38);\">new Foo() 产⽣了⼀个实例，然后通过原型链找到了 Foo 上的 getName 函数，所以结果 </span></p><p><span style=\"color: rgb(38, 38, 38);\">为 2。</span></p><p><br></p><p><br></p><h1>instanceof </h1><p>instanceof 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是 </p><p>能找到类型的 prototype 。 </p><p>我们也可以试着实现⼀下 instanceof</p><pre class=\"ql-syntax\" spellcheck=\"false\">function Myinstanceof (left, right) {\n    // 获得类型的原型\n    let prototype = right.prototype\n    // 获得对象的原型\n    left = left.__proto__\n    // 判断对象的类型是否等于类型的原型\n    while (true) {\n        if (left === null)\n            return false\n        if (prototype === left)\n            return true\n        left = left.__proto__\n    }\n}\n</pre><p><br></p>",
      "region": "",
      "author": "admin",
      "roleId": 1,
      "auditState": 1,
      "publishState": 2,
      "createTime": 1663850233954,
      "star": 238,
      "view": 976,
      "id": 23,
      "publishTime": 1663850239594
    },
    {
      "title": "闭包",
      "categoryId": 6,
      "content": "<h1>new</h1><ol><li>创建一个空对象。</li><li>新对象隐式原型<strong>proto</strong>链接到构造函数显式原型prototype上</li><li>执行构造函数 并将构造函数作用域指向新对象</li><li>如果该函数没有返回对象，则返回 this( 返回this实际是返回一个空对象， new Object()就是返回一个空对象{} )。</li></ol><p>在调⽤ new 的过程中会发⽣以上四件事情，我们也可以试着来⾃⼰实现⼀个 new:</p><pre class=\"ql-syntax\" spellcheck=\"false\">function _new(constructor, ...arg) {\n  var obj = {}; // 对应于上面的步骤 1\n  obj.__proto__ = constructor.prototype; // 对应于上面的步骤 2\n\n  var res = constructor.apply(obj, arg); // 对应于上面的步骤 3\n\n  return Object.prototype.toString.call(res) === '[object Object]' ? res : obj; // 对应于上面的步骤 4\n}\n\nconst Fun = function(name) {\n  this.name = name;\n};\n\nconsole.log(_new(Fun, '小明'));\n\n// Fun {name: \"小明\"}\n</pre><p>对于实例对象来说，都是通过 new 产⽣的，⽆论是 function Foo() 还是 let a = { b : </p><p>1 } 。 </p><p>对于创建⼀个对象来说，更推荐使⽤字⾯量的⽅式创建对象（⽆论性能上还是可读性）。因 </p><p>为你使⽤ new Object() 的⽅式创建对象需要通过作⽤域链⼀层层找到 Object ，但是你使 </p><p>⽤字⾯量的⽅式就没这个问题。</p><pre class=\"ql-syntax\" spellcheck=\"false\">function Foo() {}\n// function 就是个语法糖\n// 内部等同于 new Function()\nlet a = { b: 1 }\n// 这个字⾯量内部也是使⽤了 new Object()\n</pre><p>对于 new 来说，还需要注意下运算符优先级。</p><pre class=\"ql-syntax\" spellcheck=\"false\">function Foo() {\n return this; }\nFoo.getName = function () {\n console.log('1');\n};\nFoo.prototype.getName = function () {\n console.log('2');\n};\nnew Foo.getName(); // -&gt; 1\nnew Foo().getName(); // -&gt; 2\n</pre><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/2532466/1652941427348-6aa80821-162f-4f5c-bd4e-92f36d88e5be.png\" width=\"719.2727272727273\"></p><p><br></p><p>从上图可以看出， new Foo() 的优先级⼤于 new Foo ，所以对于上述代码来说可以这样划 </p><p>分执⾏顺序</p><pre class=\"ql-syntax\" spellcheck=\"false\">new (Foo.getName()); \n(new Foo()).getName();\n</pre><p><span style=\"color: rgb(38, 38, 38);\">对于第⼀个函数来说，先执⾏了 Foo.getName() ，所以结果为 1；对于后者来说，先执⾏ </span></p><p><span style=\"color: rgb(38, 38, 38);\">new Foo() 产⽣了⼀个实例，然后通过原型链找到了 Foo 上的 getName 函数，所以结果 </span></p><p><span style=\"color: rgb(38, 38, 38);\">为 2。</span></p><p><br></p><p><br></p><h1>instanceof </h1><p>instanceof 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是 </p><p>能找到类型的 prototype 。 </p><p>我们也可以试着实现⼀下 instanceof</p><pre class=\"ql-syntax\" spellcheck=\"false\">function Myinstanceof (left, right) {\n    // 获得类型的原型\n    let prototype = right.prototype\n    // 获得对象的原型\n    left = left.__proto__\n    // 判断对象的类型是否等于类型的原型\n    while (true) {\n        if (left === null)\n            return false\n        if (prototype === left)\n            return true\n        left = left.__proto__\n    }\n}\n</pre><p><br></p>",
      "region": "南极洲",
      "author": "钢蛋",
      "roleId": 2,
      "auditState": 2,
      "publishState": 2,
      "createTime": 1663850541090,
      "star": 326,
      "view": 804,
      "id": 24,
      "publishTime": 1663850557657
    }
  ]
}